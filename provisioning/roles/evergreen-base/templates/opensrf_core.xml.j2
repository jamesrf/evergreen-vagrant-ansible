<?xml version="1.0"?>
<!-- 
Example OpenSRF bootstrap configuration file for Evergreen
-->
<config>
  <!-- Options for <loglevel>: 0 None, 1 Error, 2 Warning, 3 Info, 4 debug -->
  <opensrf>
    <routers>

      <!-- define the list of routers our services will register with -->

      <router>

        <!-- This is the public router.  On this router, we only register applications
             which should be accessible to everyone on the opensrf network -->
        <name>router</name>
        <domain>{{ domains.public.host }}</domain>
        <services>
        {% for service in domains.public.services %}
            <service>{{ service }}</service> 
        {% endfor %}
        </services>
      </router>

      <router>
        <!-- This is the private router.  All applications must register with 
            this router, so no explicit <services> section is required -->
        <name>router</name>
        <domain>{{ domains.private.host }}</domain>
      </router>
    </routers>

    <!-- Our domain should match that of the private router -->
    <domain>{{ domains.private.host }}</domain>
    <username>{{ domains.private.user }}</username>
    <passwd>{{ domains.private.password }}</passwd>
    <port>5222</port>

   <!-- 
      Name of the router used on our private domain.  
      This should match one of the <name> of the private router above.
     -->
    <router_name>router</router_name>

    <logfile>{{ localstatedir }}/log/osrfsys.log</logfile>
    <!--
      <logfile>syslog</logfile>
      <syslog>local0</syslog>
      <actlog>local1</actlog>
     -->
    <loglevel>3</loglevel>
    <settings_config>{{ sysconfdir }}/opensrf.xml</settings_config>
  </opensrf>
  <!-- 
    The section between <gateway>...</gateway> is a standard OpenSRF C
    stack configuration file
  -->
  <gateway>
    <client>true</client>
    <router_name>router</router_name>

    <!-- The gateway connects to the public domain for security -->
    <domain>{{ domains[ gateway.domain ].host }}</domain>

    <!-- This section will be soon deprecated for multi-domain mode... -->
    <services>
      {% for service in gateway.services %}
      <service>{{ service }}</service> 
      {% endfor %}
    </services>

    <!-- jabber login info -->
    <username>{{ domains[ gateway.domain ].user }}</username>
    <passwd>{{ domains[ gateway.domain ].password }}</passwd>
    <port>5222</port>
    <loglevel>3</loglevel>
    <logfile>{{ localstatedir }}/log/gateway.log</logfile>
    <!--
      <logfile>syslog</logfile>
      <syslog>local6</syslog>
      <actlog>local1</actlog>
    -->
  </gateway>
  <!-- ======================================================================================== -->
  <routers>
    {% for router in routers %}
        <router> <!-- {{ router.name }} -->
            <trusted_domains>
                {% for tds in router.trusted_domain_servers %}
                <server>{{ tds }}</server>
                {% endfor %}
                {% for tdc in router.trusted_domain_clients %}
                <client>{{ tdc }}</client>
                {% endfor %}
            </trusted_domains>
            <transport>
                <server>{{ router.transport_host }}</server>
                <port>5222</port>
                <unixpath>{{ localstatedir }}/sock/unix_sock</unixpath>
                <username>{{ router.user }}</username>
                <password>{{ router.password }}</password>
                <resource>router</resource>
                <connect_timeout>10</connect_timeout>
                <max_reconnect_attempts>5</max_reconnect_attempts>
            </transport>
            <logfile>{{ localstatedir }}/log/router.log</logfile>
            <!--
            <logfile>syslog</logfile>
            <syslog>local2</syslog>
            -->
            <!--
            <logtag>instance1</logtag>
            -->
            <loglevel>2</loglevel>
        </router>
    {% endfor %}
    </routers>
  <!-- ======================================================================================== -->

  <!-- Any methods which match any of these match_string node values will     
       have their params redacted from lower-level input logging.             
       Adjust these examples as needed. -->      
  <shared>
    <log_protect>
      <match_string>open-ils.auth.authenticate.verify</match_string>
      <match_string>open-ils.auth.authenticate.complete</match_string>
      <match_string>open-ils.auth.login</match_string>
      <match_string>open-ils.auth_proxy.login</match_string>
      <match_string>open-ils.actor.patron.password_reset.commit</match_string>
      <match_string>open-ils.actor.user.password</match_string>
      <match_string>open-ils.actor.user.username</match_string>
      <match_string>open-ils.actor.user.email</match_string>
      <match_string>open-ils.actor.patron.update</match_string>
      <match_string>open-ils.cstore.direct.actor.user.create</match_string>
      <match_string>open-ils.cstore.direct.actor.user.update</match_string>
      <match_string>open-ils.cstore.direct.actor.user.delete</match_string>
      <match_string>open-ils.search.z3950.apply_credentials</match_string>
    </log_protect>
  </shared>
</config>
